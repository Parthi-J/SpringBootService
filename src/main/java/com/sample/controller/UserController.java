/**
 * 
 */
package com.sample.controller;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;

import org.springframework.beans.factory.annotation.Autowired;

import com.sample.entity.UserEntity;
import com.sample.repository.UserRepository;
import com.sample.utils.CustomResponse;

import lombok.extern.log4j.Log4j2;

/**
 * @author user
 *
 */
@RestController
@RequestMapping(value = "api/v1/users")
@Log4j2
public class UserController {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@RequestMapping(value = "", method = RequestMethod.POST) // Map ONLY POST Requests
	public @ResponseBody CustomResponse<UserEntity> addNewUser(@Valid @RequestBody UserEntity user) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		log.info(user);
		UserEntity savedUser = userRepository.save(user);
		return new CustomResponse<UserEntity>("User saved successfully...", savedUser);
	}

	@RequestMapping(value = "", method = RequestMethod.GET)
	public @ResponseBody CustomResponse<Iterable<UserEntity>> getAllUsers() {
		// This returns a JSON or XML with the users
		Iterable<UserEntity> userList = userRepository.findAll();
		return new CustomResponse<Iterable<UserEntity>>("User list fetched successfully.", userList, false);
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public @ResponseBody CustomResponse<UserEntity> findOne(@PathVariable @NotEmpty Long id) throws Exception {
		Optional<UserEntity> user = userRepository.findById(id);
		if (user.isPresent()) {
			return new CustomResponse<UserEntity>("User details fetched successfully...", user.get());
		} else {
			throw new Exception("No user record exist for given id");
		}
	}
	
	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public @ResponseBody CustomResponse<?> deleteUserById(@PathVariable @NotEmpty Long id) throws Exception {
		Optional<UserEntity> user = userRepository.findById(id);
		if (user.isPresent()) {
			userRepository.deleteById(id);
			return new CustomResponse<Object>("User deleted successfully...");
		} else {
			throw new Exception("No user record exist for given id");
		}
	}
}
